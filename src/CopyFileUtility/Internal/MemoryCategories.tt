<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
    int[] MemorySizes = new []
    {
        1024,
        1024 * 4,
        1024 * 16,
        1024 * 64,
        1024 * 128,
        1024 * 512,
        1024 * 1024,
        1024 * 1024 * 4,
        1024 * 1024 * 16,
        1024 * 1024 * 64,
        1024 * 1024 * 128,
        1024 * 1024 * 256,
    };
#>

using System.Runtime.CompilerServices;
namespace CopyFileUtility_Internal
{
    internal partial class MemoryPool
    {
<# foreach(var memorySize in MemorySizes) { #>
        private readonly MemoryCategory Memory<#= memorySize #> = new MemoryCategory(<#= memorySize #>);
<# } #>

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        MemoryCategory GetMemoryCategory(int size)
        {
            return size switch
            {
                <= <#= MemorySizes[0] #> => Memory<#= MemorySizes[0] #>,

<# for(var memorySizeIndex = 1; memorySizeIndex < MemorySizes.Length - 1;++memorySizeIndex) { #>
                > <#= MemorySizes[memorySizeIndex-1] #> and <= <#= MemorySizes[memorySizeIndex] #>  => Memory<#= MemorySizes[memorySizeIndex] #>,
<# } #>
                _ => Memory<#= MemorySizes[MemorySizes.Length - 1 ] #>
            };
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        bool TryGetNotEmptyMemoryCategory(int size,out MemoryCategory? category)
        {
<# foreach(var memorySize in MemorySizes) { #>
            if( size < Memory<#= memorySize #>.Size  && !Memory<#= memorySize #>.IsEmpty() )
            {
                category = Memory<#= memorySize #>;
                return true;
            }
<# } #>
<# foreach(var memorySize in MemorySizes.Reverse()) { #>
            if( Memory<#= memorySize #>.Size < size && !Memory<#= memorySize #>.IsEmpty() )
            {
                category = Memory<#= memorySize #>;
                return true;
            }
<# } #>
            category = default;
            return false;
        }



        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void ResetMemoryCategory()
        {
<# foreach(var memorySize in MemorySizes) { #>
            Memory<#= memorySize #>.Reset();
<# } #>
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void DisposeMemoryCategory()
        {
<# foreach(var memorySize in MemorySizes) { #>
            Memory<#= memorySize #>.Dispose();
<# } #>
        }

    }
}
